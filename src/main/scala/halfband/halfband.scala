//These are the ahlf-band filters for the F2 decimator
package halfband

import chisel3.experimental._
import chisel3._
import datatypes._

class halfband (n: Int=16, resolution: Int=32, coeffs: Seq[Int]=Seq(-1,2,-3,4,-5)) extends Module {
  val io = IO(new Bundle {
    val clockp2       = Input(Clock())
    val iptr_A        = new complexIn(n=n)
    val Z             = Flipped(new complexIn(n=n))
  })

  //I guess lots of stuff could be reduced by creating a function for the subfilter
  val sub1coeffs=coeffs.indices.filter(_ %2==1).map(coeffs(_)) //Odd coeffs
  val sub2coeffs=coeffs.indices.filter(_ %2==0).map(coeffs(_)) //Even coeffs

  val sub1stages=sub1coeffs.length //number of register stages in first subfir
  val sub2stages=sub2coeffs.length //number of register stages in second subfir

  val inregs  = Reg(Vec(2, new complex(n=n))) //registers for sampling rate reduction
  inregs(0):=io.iptr_A
  inregs(1):=inregs(0)

  //The half clock rate domain
  withClock (io.clockp2){
    val slowregs  = Reg(Vec(2, new complex(n=n))) //registers for sampling rate reduction
    slowregs(0):=inregs(0)
    slowregs(1):=inregs(1)

    // Transposed direct form subfilters. Folding left fior the synthsizer
    // Remains to be seen if it is clever enough
    val sub1regs  = Reg(Vec(sub1stages+1, new complex(n=resolution)))
    sub1regs(0).real:= 0.U(resolution.W)
    sub1regs(0).imag:= 0.U(resolution.W)
    for (i <- 0 to sub1stages-1) {
      sub1regs(i+1).real:=(slowregs(0).real.asSInt*sub1coeffs(i).asSInt+sub1regs(i).real.asSInt).asUInt
      sub1regs(i+1).imag:=(slowregs(0).imag.asSInt*sub1coeffs(i).asSInt+sub1regs(i).imag.asSInt).asUInt
    }

    val sub2regs  = Reg(Vec(sub2stages+1, new complex(n=resolution)))
    sub2regs(0).real:= 0.U(resolution.W)
    sub2regs(0).imag:= 0.U(resolution.W)
    for (i <- 0 to sub2stages-1) {
      sub2regs(i+1).real:=(slowregs(1).real.asSInt*sub2coeffs(i).asSInt+sub2regs(i).real.asSInt).asUInt
      sub2regs(i+1).imag:=(slowregs(1).imag.asSInt*sub2coeffs(i).asSInt+sub2regs(i).imag.asSInt).asUInt
    }
    
    io.Z.real := (sub1regs(sub1stages).real+sub2regs(sub2stages).real)(resolution-1,resolution-n)
    io.Z.imag := (sub1regs(sub1stages).imag+sub2regs(sub2stages).imag)(resolution-1,resolution-n)

  }
}

//This is the object to provide verilog
object halfband extends App {
  //Convert coeffs to integers with 16 bit resolution
  val coeffres=16
  val taps = F2halfbands.hb1.map(_ * (math.pow(2,coeffres-1)-1)).map(_.toInt)
  chisel3.Driver.execute(args, () => new halfband(coeffs=taps) )
}



//These are the halfband filters for cutoff 0.45. Attenuation about -70db
//with 16-bit coefficients.
object F2halfbands {

val hb1=Seq(0.01371060509031136846747056523554,
0.00000000000000000000000000000000,
-0.10326125706367410284070018633429,
0.00000000000000000000000000000000,
0.58956052520820922957511811546283,
1.00000000000000000000000000000000,
0.58956052520820922957511811546283,
0.00000000000000000000000000000000,
-0.10326125706367410284070018633429,
0.00000000000000000000000000000000,
0.01371060509031136846747056523554)


val hb2=Seq(-0.00599990441308970515188470074008,
0.00000000000000000000000000000000,
0.03716973913798188311474746114982,
0.00000000000000000000000000000000,
-0.13969657319473985368496471437538,
0.00000000000000000000000000000000,
0.60843328899123405584248303057393,
1.00000000000000000000000000000000,
0.60843328899123405584248303057393,
0.00000000000000000000000000000000,
-0.13969657319473985368496471437538,
0.00000000000000000000000000000000,
0.03716973913798188311474746114982,
0.00000000000000000000000000000000,
-0.00599990441308970515188470074008)


val hb3=Seq(-0.00062562083483398592091695444850,
0.00000000000000000000000000000000,
0.00082512312518594026211626868417,
0.00000000000000000000000000000000,
-0.00134699731357682049408264202128,
0.00000000000000000000000000000000,
0.00206636581996642821820731050764,
0.00000000000000000000000000000000,
-0.00302776043559022014356463259332,
0.00000000000000000000000000000000,
0.00428436763360926647914439513443,
0.00000000000000000000000000000000,
-0.00589460785862579161875629552014,
0.00000000000000000000000000000000,
0.00793039018614864754663784651711,
0.00000000000000000000000000000000,
-0.01047662592752584762023637665607,
0.00000000000000000000000000000000,
0.01364088114938612206206158816713,
0.00000000000000000000000000000000,
-0.01756664572958339942676531109100,
0.00000000000000000000000000000000,
0.02245444717570929671346391387488,
0.00000000000000000000000000000000,
-0.02860434831397760946369857038007,
0.00000000000000000000000000000000,
0.03649475420585754359414920600102,
0.00000000000000000000000000000000,
-0.04695125414150450038341944036802,
0.00000000000000000000000000000000,
0.06153912763808053187908342351875,
0.00000000000000000000000000000000,
-0.08362681092721158115921298303874,
0.00000000000000000000000000000000,
0.12200528071047328504405982130265,
0.00000000000000000000000000000000,
-0.20897848247433231660963315334811,
0.00000000000000000000000000000000,
0.63553749132677839206451153586386,
1.00000000000000000000000000000000,
0.63553749132677839206451153586386,
0.00000000000000000000000000000000,
-0.20897848247433231660963315334811,
0.00000000000000000000000000000000,
0.12200528071047328504405982130265,
0.00000000000000000000000000000000,
-0.08362681092721158115921298303874,
0.00000000000000000000000000000000,
0.06153912763808053187908342351875,
0.00000000000000000000000000000000,
-0.04695125414150450038341944036802,
0.00000000000000000000000000000000,
0.03649475420585754359414920600102,
0.00000000000000000000000000000000,
-0.02860434831397760946369857038007,
0.00000000000000000000000000000000,
0.02245444717570929671346391387488,
0.00000000000000000000000000000000,
-0.01756664572958339942676531109100,
0.00000000000000000000000000000000,
0.01364088114938612206206158816713,
0.00000000000000000000000000000000,
-0.01047662592752584762023637665607,
0.00000000000000000000000000000000,
0.00793039018614864754663784651711,
0.00000000000000000000000000000000,
-0.00589460785862579161875629552014,
0.00000000000000000000000000000000,
0.00428436763360926647914439513443,
0.00000000000000000000000000000000,
-0.00302776043559022014356463259332,
0.00000000000000000000000000000000,
0.00206636581996642821820731050764,
0.00000000000000000000000000000000,
-0.00134699731357682049408264202128,
0.00000000000000000000000000000000,
0.00082512312518594026211626868417,
0.00000000000000000000000000000000,
-0.00062562083483398592091695444850)

}
